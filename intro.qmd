# Introduction

## Why Use R?

You may be asking yourself, out of all of the possible visualization softwares which exist, why should I spend time learning and using R?

Great question!

R is a useful tool and worthwhile to learn for several reasons:

1.  It's free!
2.  Because it's open source, thousands of people have contributed packages and functions at a pace that proprietary softwares can't compete with
3.  It is very flexible and robust meaning there's a lot you can do with it (including creating this very website!)
4.  It is becoming widely used across many industries
5.  We can create visualizations and perform quantitative analyses in the same system.

## So What is R?

R is a command-line, object-oriented programming language commonly used for data analysis and statistics.

**Command-line** means that we have to give R commands in order for us to get it to do something. So for instance, if we wanted to know what the sum of 3 and 5 were, we can use R to solve this problem for us:

```{r}
## Adding 3 & 5 Together: ##
3 + 5
```

**Object-oriented** means that we can save individual pieces of output as some name that we can use later. This is a super handy feature, especially when you have complicated scripts!

```{r}
## Saving the result of 3 + 5 as a ##
a <- 3 + 5
a
```

## What Can R Do?

What can R do? Well, for the purpose of data analytics, I am yet to find a limit of what it can do!

In this class, we will be using R as a tool for visualizing categorical and quantitative data through various means.

## Functions in R

In order to visualize data in R, we need to be able to import data into R. There are a variety of ways of importing data into R, but they largely depend on the type of datafile that you are importing (e.g., Excel file, CSV file, text file, etc.). While there are lots of different files which can be imported into R (Google and ChatGPT are excellent resources for searching for code for how to do something), we'll mostly use two types in this class: Excel and CSV

Let's try importing the `HEART.csv` file into R. This file is part of the famous Framingham Heart Study.

Since we set up our first class session by connecting to GitHub, we should have this file in our project folder already.

To read in this CSV file, we will use the `read_csv` function which is part of the `readr` package. Every function in R requires arguments specified inside of parentheses. We can think of packages like toolboxes within a mechanic's workshop. Each toolbox contains different tools. A tool is like a function; we use specific tools (functions) to solve specific problems!

-   `read_csv` is a tool we use to solve the problem of reading CSV files into R.
-   The `read_csv` tools is stored within the `readr` toolbox (package).

## Importing Data into R

While many packages come installed in RStudio automatically, there are far, far more which we have to install from the web, including `readr`.

To install a package, we use the `install.packages` function:

```{r,echo=TRUE,eval=F}
## Installing the readr package ##
install.packages('readr')
```

We can also think of functions like mathematical functions; we have to supply the function with special inputs called [*arguments*]{.underline} in order to get the desired output. For instance, in the `install.packages` function, we had to specify to the function which package we wanted to install.

How do we know what arguments to specify for a given function? There are lots of different ways, but one way we can do so is by using the `?` operator.

```{r,eval=F}
## What are the arguments of read_csv? ##
?readr::read_csv
```

As we can see, there are a lot of arguments we can specify. However, we don't need to specify most of them in this case. All of the arguments which have an `=` after them, like "`col_names = TRUE`", will retain that specific argument unless you explicitly change it. I refer to these as *optional arguments*, those arguments whose value doesn't necessarily need to be changed in order to get the function to execute.

To note, `col_names = TRUE` means that the columns of the CSV file have names. If they don't, then we would change it to, `col_names = FALSE` and the column names will have generic names, (`V1, V2, ... , VN`).

Conversely, any argument which does not have an already specified value is a *required argument*, or one the user (that's you!) must fill in for the function to execute. In the case of `read_csv`, that required argument is the file path!

```{r}
library(readr)
heart <- read_csv("Introduction to R and RStudio/HEART.csv")
```

What about an Excel file? How do we import those? What if we want to read in the `esoph.xlsx` file? In this case, we can use a function called `read_xlsx` which is part of the package `readxl`. So just as before, we can run:

```{r}
install.packages('readxl')
library(readxl)
esoph <- read_xlsx("Introduction to R and RStudio/esoph.xlsx")
```

## Exploring Dataframes using R

So far we have imported some datasets into the RStudio environment...how do we know they imported correctly? The best way that I have found which uses a combination of some traditional functions is a function called `glimpse` which is part of an incredibly useful data wrangling package called `dplyr`:

```{r}
install.packages('dplyr')
library(dplyr)
heart |>
  glimpse()
```

As we visually inspect the first few rows of the HEART dataframe, we can see that the "Sex" variable appears to be [*categorical*]{.underline} whereas the "Weight" variable appears to be [*quantitative*]{.underline}.

-   A **quantitative** variable is something which can be measured with a number, like dollars, time, height, weight, blood pressure, etc. R refers to these as "numeric" variables.
-   A **categorical** variable is just the opposite. It is something which cannot be quantified and is more of a quality. These are things like sex, country of origin, hair color, cause of death etc. R refers to these as "character" variables.

You may be asking yourself, "why does this matter?" It's important for two primary reasons:

1.  The type of variable we are working with dictates to us which visualization methods would be most appropriate.
2.  In terms of R programming, we can look at the variable "Sex" and "Height" in the heart dataframe and conclude that these are categorical and quantitative variables, respectively. But when we read the heart dataframe into R using `readr::read_csv`, we didn't have to tell R what types of variables each column was; it by default scans each column and makes a best guess as to what type of variable the column contains.
    -   So how can we know that R properly recognized the variables in the heart dataframe?
    -   Let's take a `glimpse`!

```{r}
heart |>
  glimpse()
```

Sex, for example, we can imagine is a categorical variable as its values, male and female, are characteristics and not numbers.

-   We can tell R read it in as a categorical variable because it is coded as character (notice the `<chr>` to the right of the Sex variable name).

-   Height, on the other hand, we can imagine is a quantitative variable as its values are numbers!

    -   We can tell R read it in as a quantitative variable because it is coded as double (notice the `<dbl>` to the right of the Height variable name).

## Examining Subsets of Dataframes
