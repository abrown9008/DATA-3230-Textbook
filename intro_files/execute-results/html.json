{
  "hash": "baf3e7e3457c970b20fae84a8714c430",
  "result": {
    "markdown": "# Introduction\n\n## Why Use R?\n\nYou may be asking yourself, out of all of the possible visualization softwares which exist, why should I spend time learning and using R?\n\nGreat question!\n\nR is a useful tool and worthwhile to learn for several reasons:\n\n1.  It's free!\n2.  Because it's open source, thousands of people have contributed packages and functions at a pace that proprietary softwares can't compete with\n3.  It is very flexible and robust meaning there's a lot you can do with it (including creating this very website!)\n4.  It is becoming widely used across many industries\n5.  We can create visualizations and perform quantitative analyses in the same system.\n\n## So What is R?\n\nR is a command-line, object-oriented programming language commonly used for data analysis and statistics.\n\n**Command-line** means that we have to give R commands in order for us to get it to do something. So for instance, if we wanted to know what the sum of 3 and 5 were, we can use R to solve this problem for us:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Adding 3 & 5 Together: ##\n3 + 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\n**Object-oriented** means that we can save individual pieces of output as some name that we can use later. This is a super handy feature, especially when you have complicated scripts!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Saving the result of 3 + 5 as a ##\na <- 3 + 5\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\n## What Can R Do?\n\nWhat can R do? Well, for the purpose of data analytics, I am yet to find a limit of what it can do!\n\nIn this class, we will be using R as a tool for visualizing categorical and quantitative data through various means.\n\n## Functions in R\n\n-   In order to visualize data in R, we need to be able to import data into R.\n\n-   There are a variety of ways of importing data into R, but they largely depend on the type of datafile that you are importing (e.g., Excel file, CSV file, text file, etc.).\n\n-   While there are lots of different files which can be imported into R (Google is an excellent resource for searching for code for how to do something), we're going to focus on two main types: Excel and CSV\n\n-   Let's try importing a CSV file into R. This file is part of the famous Framingham Heart Study.\n\n-   Since we set up our first class session by connecting to GitHub, we should have this file in our project folder already.\n\n-   Now to read in this CSV file, we will use the `read_csv` function which is part of the `readr` package.\n\n-   Every function in R requires arguments specified inside of parentheses.\n\n-   We can think of packages like toolboxes within a mechanic's workshop. Each toolbox contains different tools.\n\n-   A tool is like a function; we use specific tools (functions) to solve specific problems!\n\n    -   `read_csv` is a tool we use to solve the problem of reading CSV files into R.\n\n-   The `read_csv` tools is stored within the `readr` toolbox (package).\n\n## Importing Data into R\n\n-   Now, while many packages come installed in RStudio automatically, there are far, far more which we have to install from the web, including `readr`.\n-   To install a package, we use the `install.packages` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Installing the readr package ##\ninstall.packages('readr')\n```\n:::\n\n\n-   Now, we can also think of functions like mathematical functions; we have to supply the function with special inputs called [*arguments*]{.underline} in order to get the desired output.\n    -   For instance, in the `install.packages` function, we had to specify to the function which package we wanted to install.\n-   How do we know what arguments to specify for a given function?\n-   There are lots of different ways, but one way we can do so is by using the `?` operator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## What are the arguments of read_csv? ##\n?readr::read_csv\n```\n:::\n\n\n-   As we can see, there are a lot of arguments we can specify. However, we don't need to specify most of them.\n\n<!-- -->\n\n-   All of the arguments which have an `=` after them, like \"`col_names = TRUE`\", will retain that specific argument unless you explicitly change it.\n    -   `col_names = TRUE` means that the columns of the CSV file have names. If they don't, then we would change it to, `col_names = FALSE` and the column names will have generic names, (`V1, V2, ... , VN`).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}